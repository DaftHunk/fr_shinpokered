Setup and assemble the pokered assembly at github.com/pret/pokered. Time for a little learning exercise.

Go to data/mapObjects/ and open the asm file for the basement of cerulean cave. 
This file defines all the interactable objects for the that map. 
Notice how there are 3 objects. You want to look at the first object of the map.

>>object SPRITE_SLOWBRO, 27, 13, STAY, DOWN, 1, MEWTWO, 70

This defines an object to be shown. 
-The object uses the slowbro overworld sprite, 
-it is at xy coordinates (27,13), 
-the object STAYs in place and does not move, 
-the object sprite faces DOWN, 
-the game runs Text Pointer #1 when talking to the object, 
-interacting with the object triggers a wild MEWTWO battle, 
-and the wild pokemon is at level 70.

Now go to the /scripts/ folder and open the asm file for the basement of cerulean cave. 
This file defines all the scripts that run on the map. 
The second and third thing that's done under the top function (the one that runs constantly in a loop for the map) 
is to point the HL register to MewtwoTrainerHeader and DE register to .ScriptPointers (which calls functions for loading trainer battles). 
Under this function, register HL is pointed to mewtwo's trainer. 
The battle is getting set up as if Mewtwo was a hostile npc trainer.

You will notice that the first text pointer is a function called MewtwoText. 
Then it calls a function that handles talking to an npc trainer before ending the text script. 
It's from here that mewtwo's trainer header is processed and run through.

MewtwoTrainerHeader is defined just above MewtwoText. 
The one-time battle state is determined by the event EVENT_BEAT_MEWTWO (defined in constants/event_constants.asm). 
This is a single bit that gets set to 1 when the battle with mewtwo is initiated. 
There also is the view range, so Mewtwo will ambush you within 4 steps of his view. 
Finally is the text function to run when interacting with mewtwo called MewtwoBattleText.

MewtwoBattleText is nothing special. It displays the text defined by _MewtwoBattleText (note the underscore). 
Afterwards it runs some assembly code to play mewtwo's cry before ending the script.

Now go to the /text/maps and open the asm file for the basement of cerulean cave. 
Find the function _MewtwoBattleText. 
You can see that here is the text string that gets displayed on screen when the cry is played.

Now go to data/hide_show_data.asm and scroll down to CeruleanCaveB1FHS: which corresponds to the basement of cerulean cave. 
There are three lines here for the map's three objects that can be shown/hidden. 
The first one is for mewtwo since mewtwo is the first object way back in your mapObjects file definition.

>>db CERULEAN_CAVE_B1F,$01,Show

This is defining the map's 
-constant name (your constant might be CERULEAN_CAVE_3), 
-then the object number on the map to which this applies (Hexadecimal 01 referring to mewtwo), 
-and whether the object state should be Show or Hide when a New Game is started.

This is everything needed to actually create a new static overworld wild battle with mewtwo. 


Now say you wanted to add Mew under the truck.
You can just do the same thing, but use mew and the files corresponding to vermilion dock.

Note that in hide_show_data.asm there is no entry for the vermilion dock. You will have to make one. 
Vermilion dock has the map constant of $5E. 
Under MapHSPointers:, scroll down to SSAnne2FHS and go highlight the second NoHS above it. 
Rename it to MapHS5E (notice that they all adhere to hexadecimal order in the list if you count them all). 
Now you can create your own MapHS5E: function below to have hide/show data for VERMILION_DOCK. 
Place it at the end of the file but above the line "db $FF,$01,Show".


Let's say you want to dynamically hide or show an object. 
Then you must set up a constant in constants/hide_show_constants.asm. 
Note how there is already a constant called HS_MEWTWO. This goes unused in the vanilla game, 
but it means that within a script you can use the commands 
-predef HideObject HS_MEWTWO 
-and predef ShowObject HS_MEWTWO 
to hide and show mewtwo on demand.

Since you created MapHS5E: at the end of the pointer file, you would create HS_MEW at the end of the constant file. 
The engine assumes the orders of those functions and these constants stay all lined up with each other

And that is how you would add mew under the truck in the most reliable way.
